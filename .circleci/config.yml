version: 2.1
orbs:
  docker: circleci/docker@2.0.1
  aws-cli: circleci/aws-cli@2.0.3
  kubernetes: circleci/kubernetes@0.12.0
  aws-eks: circleci/aws-eks@0.2.3

commands:
  destroy-environment:
    description: Destroy front-end and back-end cloudformation stacks
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - run:
          name: Destroy backend
          when: on_fail
          command: |
            aws eks delete-cluster --name << parameters.cluster-name >>  --region $AWS_DEFAULT_REGION

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            echo "123"

  restore-cache-deps:
    steps:
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

  save-cache-deps:
    steps:
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

jobs:
  build-app:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - restore-cache-deps
      - run:
          name: install dependencies
          command: |
            make setup
            . venv/bin/activate
            make install
      - save-cache-deps
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint

  test-app:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - restore-cache-deps
      - save-cache-deps
      - run:
          command: |
            make test
            
  scan-app:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - restore-cache-deps
      - save-cache-deps
      - run:
          name: scan
          command: |
            . venv/bin/activate
            make scan

  build-push-docker:
    executor: docker/docker
    steps:
      - setup_remote_docker
      - checkout
      - docker/check
      - docker/build:
          image: alexcgdocker/ml-app-capstone
      - docker/push:
          digest-path: /tmp/digest.txt
          image: alexcgdocker/ml-app-capstone
      - run:
          command: |
            echo "Digest is: $(</tmp/digest.txt)"

  create-small-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ''
      - run:
          name: Install the eksctl tool
          command: |
            if which eksctl > /dev/null; then
            echo "eksctl is already installed"
            exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
            SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>
          skip-kubectl-install: false
          verbose: 3
          node-type: t2.small
          nodes-max: 2
          ssh-access: false
          ssh-public-key: ''
      - destroy-environment:
          cluster-name: my-eks-demo

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            echo "123"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "123"

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["81:79:32:77:70:22:b5:84:ee:80:05:52:e2:44:48:d8"] # You can get this ID in the section where you registered the SSH Key
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            echo "123"
      - run:
          name: Configure server
          command: |
            echo "123"

  deploy-app:
    docker:
      - image: cimg/python:3.10.0-node
        user: root
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["81:79:32:77:70:22:b5:84:ee:80:05:52:e2:44:48:d8"] # You can get this ID in the section where you registered the SSH Key
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: install dependencies
          command: |
            echo "123"
      - run:
          name: install node modules
          command: |
            echo "123"
      - run:
          name: build backend dist
          command: |
            echo "123"
      - run:
          name: build zip file
          command: |
            echo "123"
      - run:
          name: add ansible config
          command: |
            echo "123"
      - run:
          name: Deploy backend
          command: |
            echo "123"
      - revert-migrations

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            echo "123"
      - run:
          name: Backend smoke test.
          command: |
            echo "123"
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            echo "123"
      - revert-migrations

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id and Remove old stacks and files
          command: |
            echo "123"
      - revert-migrations

workflows:
  default:
    jobs:
      - build-app
      - test-app:
          requires: [build-app]
      - scan-app:
          requires: [build-app]
      - build-push-docker:
          requires: [test-app, scan-app]
      - create-small-cluster:
          cluster-name: my-eks-demo
          requires:
            - build-push-docker
      - deploy-infrastructure:
          requires: [create-small-cluster]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - deploy-app:
          requires: [configure-infrastructure]
      - smoke-test:
          requires: [deploy-app]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
