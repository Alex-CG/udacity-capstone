version: 2.1
orbs:
  docker: circleci/docker@2.0.1
  aws-cli: circleci/aws-cli@2.0.3
  kubernetes: circleci/kubernetes@0.12.0
  aws-eks: circleci/aws-eks@0.2.3

commands:
  destroy-cloud-env:
    description: Destroy cloud stuff
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - run:
          when: on_fail
          command: |
            pip install awscli
      - run:
          name: Destroy backend
          when: on_fail
          command: |
            aws eks delete-cluster --name << parameters.cluster-name >>  --region $AWS_DEFAULT_REGION
            aws cloudformation delete-stack --stack-name eksctl-<< parameters.cluster-name >>-cluster

  restore-cache-deps:
    steps:
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

  save-cache-deps:
    steps:
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

jobs:

  build-app:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - restore-cache-deps
      - run:
          name: install dependencies
          command: |
            make setup
            . venv/bin/activate
            make install
      - save-cache-deps
      
  lint-app:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - restore-cache-deps
      - run:
          name: run lint
          command: |
            make setup
            . venv/bin/activate
            make lint
      - save-cache-deps

  test-app:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - restore-cache-deps
      - save-cache-deps
      - run:
          command: |
            make test
            
  scan-app:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - restore-cache-deps
      - save-cache-deps
      - run:
          name: scan
          command: |
            . venv/bin/activate
            make scan

  build-push-image:
    executor: docker/docker
    steps:
      - setup_remote_docker
      - checkout
      - docker/check
      - docker/build:
          image: alexcgdocker/ml-app-capstone
      - docker/push:
          digest-path: /tmp/digest.txt
          image: alexcgdocker/ml-app-capstone
      - run:
          command: |
            echo "Digest is: $(</tmp/digest.txt)"

  test-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          name: Kube cluster
          command: |
            kubectl get services

  run-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: deploy/eks-sample-deplyment.yml
          resource-name: eks-sample-linux-deployment

  test-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          name: Kube cluster
          command: |
            kubectl get svc
            kubectl get nodes
            kubectl get deployment

  create-eks-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ''
      - run:
          name: Install the eksctl tool
          command: |
            if which eksctl > /dev/null; then
            echo "eksctl is already installed"
            exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
            SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>
          skip-kubectl-install: false
          verbose: 3
          node-type: t2.small
          nodes-max: 2
          ssh-access: false
          ssh-public-key: ''

  test-eks-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          name: Kube cluster
          command: |
            kubectl get services

workflows:
  default:
    jobs:
      - build-app
      - lint-app:
          requires: [build-app]
      - test-app:
          requires: [lint-app]
      - scan-app:
          requires: [lint-app]
      - build-push-image:
          requires: [test-app, scan-app]
      - test-cluster:
          cluster-name: eks-capstone-project
          requires: [build-push-image]
      - run-deployment:
          cluster-name: eks-capstone-project
          requires: [test-cluster]
      - test-deployment:
          cluster-name: eks-capstone-project
          requires: [run-deployment]
  deployment:
    jobs:
      - create-eks-cluster:
          cluster-name: eks-capstone-project
      - test-eks-cluster:
          cluster-name: eks-capstone-project
          requires: [create-eks-cluster]
      # - aws-eks/delete-cluster:
      #     cluster-name: eks-capstone-project
      #     requires: [test-eks-cluster]
